class Dijkstra:
    def __init__(self, graph, goal):
        self.graph = graph
        self.goal = goal
        self.open_list = {}
        # open_list初始化为一个空字典，keys为节点'1''2'...,values为distance即从'1'到该点的实际代价
        self.closed_list = {}
        # closed_list初始化为一个空字典，键和值与open_list相同
        self.open_list['1'] = 0
        # 因为我们初始节点为'1'，并且'1'到'1'的值为0,将其传入open_list列表中
        self.parent = {'1': None}
        # 初始父节点为字典型，初始键为'1'值为None，其中键是子节点，值是父节点
        self.min_dis = None
        # 初始最短路径长度为None

    def shortest_path(self):

        while True:
            if self.open_list is None:
                print('搜索失败， 结束！')
                break

            distance, min_node = min(zip(self.open_list.values(), self.open_list.keys()))  # 取出距离最小的节点
            self.open_list.pop(min_node)  # 将其从 open_list 中去除

            self.closed_list[min_node] = distance  # 将节点加入 closed_list 中

            if min_node == self.goal:  # 如果节点为终点
                self.min_dis = distance
                shortest_path = [self.goal]  # 记录从终点回溯的路径
                father_node = self.parent[self.goal]
                while father_node != '1':
                    shortest_path.append(father_node)
                    father_node = self.parent[father_node]
                shortest_path.append('1')
                print(shortest_path[::-1])  # 逆序
                print('最短路径的长度为：{}'.format(self.min_dis))
                print('找到最短路径， 结束！')
                return shortest_path[::-1], self.min_dis  # 返回最短路径和最短路径长度

            for node in self.graph[min_node].keys():  # 遍历当前节点的邻接节点
                if node not in self.closed_list.keys():  # 邻接节点不在 closed_list 中
                    if node in self.open_list.keys():  # 如果节点在 open_list 中
                        if self.graph[min_node][node] + distance < self.open_list[node]:
                            self.open_list[node] = distance + self.graph[min_node][node]  # 更新节点的值
                            self.parent[node] = min_node  # 更新继承关系
                    else:  # 如果节点不在 open_list 中
                        self.open_list[node] = distance + self.graph[min_node][node]
                        # 计算节点的值，并加入 open_list 中
                        self.parent[node] = min_node  # 更新继承关系


if __name__ == '__main__':
    g = {'1': {'2': 2, '3': 1, '4': 4},
         '2': {'4': 3, '6': 2},
         '3': {'5': 3},
         '4': {'6': 1},
         '5': {'4': 4, '6': 2}
         }
    goal = '6'
    dijk1 = Dijkstra(g, goal)
    dijk1.shortest_path()